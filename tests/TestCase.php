<?php

namespace Tests;

use App\Models\User;
use App\Models\UserApiKey;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\TestCase as BaseTestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Http;

abstract class TestCase extends BaseTestCase
{
    use RefreshDatabase, WithFaker;

    /**
     * Create an authenticated user for testing.
     */
    protected function createAuthenticatedUser(array $attributes = []): User
    {
        $user = User::factory()->create($attributes);
        $this->actingAs($user);
        return $user;
    }

    /**
     * Create a user with API keys.
     */
    protected function createUserWithApiKeys(array $apiKeys = []): User
    {
        $user = User::factory()->create();
        
        $defaultKeys = [
            'openai' => 'sk-test-openai-key-' . $this->faker->uuid,
            'elevenlabs' => 'el-test-key-' . $this->faker->uuid,
        ];
        
        $keys = array_merge($defaultKeys, $apiKeys);
        
        foreach ($keys as $service => $key) {
            if ($key) {
                $user->setApiKey($service, $key);
            }
        }
        
        return $user;
    }

    /**
     * Create an authenticated user with API keys.
     */
    protected function createAuthenticatedUserWithApiKeys(array $apiKeys = []): User
    {
        $user = $this->createUserWithApiKeys($apiKeys);
        $this->actingAs($user);
        return $user;
    }

    /**
     * Mock external API responses.
     */
    protected function mockExternalApis(): void
    {
        // Mock OpenAI API
        Http::fake([
            'api.openai.com/v1/models' => Http::response([
                'data' => [
                    ['id' => 'gpt-4o-mini', 'object' => 'model'],
                    ['id' => 'gpt-4', 'object' => 'model'],
                ]
            ], 200),
            'api.openai.com/v1/chat/completions' => Http::response([
                'choices' => [
                    [
                        'message' => [
                            'content' => 'This is a test image description generated by the mocked OpenAI API.'
                        ]
                    ]
                ]
            ], 200)
        ]);

        // Mock ElevenLabs API
        Http::fake([
            'api.elevenlabs.io/v1/voices' => Http::response([
                'voices' => [
                    ['voice_id' => 'pNInz6obpgDQGcFmaJgB', 'name' => 'Adam'],
                    ['voice_id' => 'test-voice-id', 'name' => 'Test Voice'],
                ]
            ], 200),
            'api.elevenlabs.io/v1/text-to-speech/*' => Http::response(
                'mock-audio-content',
                200,
                ['Content-Type' => 'audio/mpeg']
            )
        ]);
    }

    /**
     * Mock failed external API responses.
     */
    protected function mockFailedExternalApis(): void
    {
        Http::fake([
            'api.openai.com/*' => Http::response([
                'error' => [
                    'message' => 'Invalid API key',
                    'type' => 'invalid_request_error'
                ]
            ], 401),
            'api.elevenlabs.io/*' => Http::response([
                'detail' => [
                    'message' => 'Invalid API key',
                    'status' => 'unauthorized'
                ]
            ], 401)
        ]);
    }
}
